// HOT TUB MONITORING PROGRAM
// V3.0  Author Jeff Wilts
// Multi function Hot tub monitoring
// Connect to household WIFI
// Support for variable number of Dallas Semiconductor temperature probes
// Provide a web interface to be able to remotely see Hot Tub Temperature
// Send email via SMTP when temperature drops below target temperature on probe 0
// Display temperature on attached OLED
// Utilizes a FIFO queue for managing the display on the OLED as there can be a variable number of sensors

#include <Arduino.h>
#include <WiFi.h>
#include <ESP_Mail_Client.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <esp_wifi.h> // Include the ESP WiFi header
#include <OneWire.h>
#include <DallasTemperature.h>
#include "WIFINFO.H" // Include the header file
#include "SettingNFO.h" // Include the header file

#define ONE_WIRE_BUS 2
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define ALERT_TEMP 22
#define RESET_TEMP 32

SMTPSession smtp;
bool emailSent = false;
bool tempDroppedEmailSent = false;
String ipAddress;
String emailStatus = "No temperature alert email sent.";
String lastEmailStatus = "No email sent yet.";

WiFiServer server(80);

float firstProbeTemp = 0.0;
String temperatureTable;

// Compile-time flag for test mode (DON't SEND EMAILS IN TEST_MODE)
#define TEST_MODE false

// Define a structure to store ProbeID and Temperature
struct TempData {
  int probeID;
  float temperature;
};

// Define the queue
#define QUEUE_SIZE 12
TempData tempQueue[QUEUE_SIZE];
int queueFront = 0;
int queueRear = 0;
int queueCount = 0;

void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.print("Connecting...");
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(200);
  }
  
  // Set WiFi to maximum power
  esp_wifi_set_max_tx_power(82); // Maximum power level in dBm * 4 (0-82 for 0-20.5dBm)

  sensors.begin();
  
  ipAddress = WiFi.localIP().toString();
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(ipAddress);

  // Request temperature from the first probe
  sensors.requestTemperatures();
  firstProbeTemp = sensors.getTempCByIndex(0);

  // Display the temperature of the first probe on the OLED
  display.setTextSize(2);
  display.setCursor(0, 20);
  if (firstProbeTemp != DEVICE_DISCONNECTED_C) {
    display.print("0: ");
    display.print(firstProbeTemp);
    display.setCursor(0, 40);
    display.print("START");
  } else {
    display.print("0: ERR");
  }
  display.display();

  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(ipAddress);
  Serial.print("Gateway: ");
  Serial.println(WiFi.gatewayIP());
  Serial.print("Subnet Mask: ");
  Serial.println(WiFi.subnetMask());
  Serial.print("DNS: ");
  Serial.println(WiFi.dnsIP());
  Serial.println();
  
  smtp.debug(1);

  // Create a task to handle email sending
  xTaskCreatePinnedToCore(
    emailTask,        // Function to implement the task
    "EmailTask",      // Name of the task
    10000,            // Stack size in words
    NULL,             // Task input parameter
    1,                // Priority of the task
    NULL,             // Task handle
    1);               // Core where the task should run

  // Start the server
  server.begin();
}

void emailTask(void * pvParameters) {
  // Send startup email with temperature from the first probe
  if (!TEST_MODE) {
    sendStartupEmail(firstProbeTemp);
  }

  while (true) {
    if (emailSent && !TEST_MODE) {
      sendAlertEmail(firstProbeTemp);
      emailSent = false;
      tempDroppedEmailSent = true; // Mark that the alert email has been sent
      emailStatus = "Temperature alert email has been sent.";
    }
    vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for a second
  }
}

void sendStartupEmail(float tempC) {
  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  SMTP_Message message;
  message.sender.name = "ESP32";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "Startup Temperature";
  message.addRecipient("Microcontrollerslab", RECIPIENT_EMAIL);

  String tempStr = (tempC != DEVICE_DISCONNECTED_C) ? String(tempC) : "ERR";
  String htmlMsg = "<div style=\"color:#FF0000;\"><h1>Startup Temperature</h1><p>The temperature from the first probe is: " + tempStr + " °C</p></div>";
  message.html.content = htmlMsg.c_str();
  message.text.charSet = "us-ascii";
  message.html.transfer_encoding = Content_Transfer_Encoding::enc_7bit; 

  if (!smtp.connect(&session))
    return;

  if (MailClient.sendMail(&smtp, &message)) {
    Serial.println("Startup email sent successfully.");
    lastEmailStatus = "Startup email sent successfully.";
  } else {
    Serial.println("Error sending startup email, " + smtp.errorReason());
    lastEmailStatus = "Error sending startup email, " + smtp.errorReason();
  }
}

void sendAlertEmail(float tempC) {
  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  SMTP_Message message;
  message.sender.name = "ESP32";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "Temperature Alert";
  message.addRecipient("Microcontrollerslab", RECIPIENT_EMAIL);

  String tempStr = String(tempC);
  String htmlMsg = "<div style=\"color:#FF0000;\"><h1>Temperature Alert!</h1><p>The temperature from the first probe is: " + tempStr + " °C</p></div>";
  message.html.content = htmlMsg.c_str();
  message.text.charSet = "us-ascii";
  message.html.transfer_encoding = Content_Transfer_Encoding::enc_7bit; 

  if (!smtp.connect(&session))
    return;

  if (MailClient.sendMail(&smtp, &message)) {
    Serial.println("Alert email sent successfully.");
    lastEmailStatus = "Alert email sent successfully.";
  } else {
    Serial.println("Error sending alert email, " + smtp.errorReason());
    lastEmailStatus = "Error sending alert email, " + smtp.errorReason();
  }
}

void updateTemperatureTable() {
  temperatureTable = "<table border='1' style='margin: 0 auto;'><tr><th>Probe</th><th>Temperature (°C)</th></tr>";
  int deviceCount = sensors.getDeviceCount();
  for (int i = 0; i < deviceCount; i++) {
    float tempC = sensors.getTempCByIndex(i);
    temperatureTable += "<tr><td>" + String(i) + "</td><td>" + (tempC != DEVICE_DISCONNECTED_C ? String(tempC) : "ERR") + "</td></tr>";
  }
  temperatureTable += "</table>";
}

// Function to insert a temperature reading into the queue
void insertIntoQueue(int probeID, float temperature) {
  if (queueCount < QUEUE_SIZE) {
    tempQueue[queueRear].probeID = probeID;
    tempQueue[queueRear].temperature = temperature;
    queueRear = (queueRear + 1) % QUEUE_SIZE;
    queueCount++;
  } else {
    resetQueue();
    Serial.println("Queue is full, cannot insert new data.");
  }
}

// Function to pop a temperature reading from the queue
TempData popFromQueue() {
  TempData data = { -1, 0.0 };
  if (queueCount > 0) {
    data = tempQueue[queueFront];
    queueFront = (queueFront + 1) % QUEUE_SIZE;
    queueCount--;
  } else {
    Serial.println("Queue is empty, cannot pop data.");
  }
  return data;
}

// Function to get the size of the queue
int getQueueSize() {
  return queueCount;
}

// Function to reset the queue
void resetQueue() {
  queueFront = 0;
  queueRear = 0;
  queueCount = 0;
}

void loop() {
  sensors.requestTemperatures();
  Serial.println("Requesting temperatures... DONE");

  int deviceCount = sensors.getDeviceCount();
  for (int i = 0; i < deviceCount; i++) {
    float tempC = sensors.getTempCByIndex(i);
    if (tempC != DEVICE_DISCONNECTED_C) {
      Serial.print("Temperature for device ");
      Serial.print(i);
      Serial.print(" is: ");
      Serial.println(tempC);

      insertIntoQueue(i, tempC); // Insert the temperature reading into the queue

      if (i == 0) {
        firstProbeTemp = tempC;
        if (tempC < ALERT_TEMP && !tempDroppedEmailSent) {
          emailSent = true; // Trigger email sending
        } else if (tempC >= RESET_TEMP) {
          tempDroppedEmailSent = false; // Reset the flag if temperature goes above 32
          emailStatus = "No temperature alert email sent.";
        }
      }
    } else {
      Serial.print("Error: Could not read temperature data for device ");
      Serial.println(i);
    }
    delay(2000); // 1-second delay
  }

  // Update the OLED display by popping up to 2 readings from the queue
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println(ipAddress);

  for (int i = 0; i < 2 && getQueueSize() > 0; i++) {
    TempData data = popFromQueue();
    display.setTextSize(2);
    display.setCursor(0, 20 * (i + 1)); // Display on rows 2 and 3
    display.print(data.probeID);
    display.print(": ");
    display.print(data.temperature);
    display.display();
  }

  updateTemperatureTable();

  // Handle client requests
  WiFiClient client = server.available();
  if (client) {
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<meta http-equiv=\"refresh\" content=\"15\">"); // Add auto-refresh meta tag
            client.println("<link rel=\"icon\" href=\"data:,\">");
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println("h1 { color: #333; }");
            client.println("p { font-size: 1.2rem; }");
            client.println("table { margin: 0 auto; }</style></head>"); // Center the table
            client.println("<body><h1>ESP32 Temperature Readings</h1>");
            client.println("<p>IP Address: " + ipAddress + "</p>");
            client.println(temperatureTable);
            client.println("<p>" + emailStatus + "</p>");
            client.println("<p>Last email status: " + lastEmailStatus + "</p>"); // Show the last email status
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    client.stop();
  }
}
